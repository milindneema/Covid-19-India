{"version":3,"sources":["components/TableComponent.js","components/StateComponent.js","components/CountryComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableContaint","props","state","loading","district","fetch","response","json","data","this","stateDistrict","setState","filter","states","className","Spinner","color","style","width","height","Table","size","responsive","borderless","Badge","districtData","map","index","key","confirmed","Component","States","handleState","stateindex","total","statewise","console","log","stateData","card","activePercent","active","recoveredPercent","recovered","deathsPercent","deaths","Col","xs","sm","md","lg","Card","body","outline","onClick","CardTitle","pill","deltaconfirmed","Progress","value","toFixed","Row","Country","Container","fluid","lastupdatedtime","CardText","deltarecovered","deltadeaths","App","Navbar","dark","radius","NavbarBrand","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f8531fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Spinner, Badge } from 'reactstrap';\r\n\r\n\r\nclass TableContaint extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading: true,\r\n            district: null,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await fetch('https://api.covid19india.org/v2/state_district_wise.json');\r\n        const data = await response.json();\r\n        if (this.props.stateDistrict === null) {\r\n            this.setState({ loading: false })\r\n        } else {\r\n            const state = data.filter(states => this.props.stateDistrict === states.state)[0];\r\n            this.setState({ district: state, loading: false })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.loading ? <div className=\"d-flex justify-content-center\">\r\n                    <Spinner color=\"primary\" style={{ width: '5rem', height: '5rem' }} />\r\n                </div> : this.state.district !== null ?\r\n                        <Table size=\"sm\" responsive borderless>\r\n                            <thead>\r\n                                <tr >\r\n                                    <th><h4><Badge color=\"dark\">#</Badge></h4></th>\r\n                                    <th><h4><Badge color=\"dark\">District</Badge></h4></th>\r\n                                    <th><h4><Badge color=\"dark\">Confirmed</Badge></h4></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.district.districtData.map((districtData, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td ><h5><Badge color=\"secondary\" >{index + 1}</Badge></h5></td>\r\n                                            <td ><h5><Badge color=\"secondary\">{districtData.district}</Badge></h5></td>\r\n                                            <td><h5><Badge color=\"secondary\">{districtData.confirmed}</Badge></h5></td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </Table> : <div></div>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default TableContaint;","import React, { Component } from 'react';\r\nimport { Card, CardTitle, Badge, Progress, Row, Col } from 'reactstrap';\r\nimport Table from './TableComponent'\r\n\r\nclass States extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            stateindex: null,\r\n            stateData: null,\r\n        }\r\n    }\r\n\r\n    handleState = (index) => {\r\n        if (this.state.stateindex === null) {\r\n            const state = this.props.total.statewise[index].state\r\n            console.log(state)\r\n            this.setState({ stateData: state, stateindex: index })\r\n        }\r\n        else {\r\n            this.setState({ stateData: null, stateindex: null })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const card = this.props.total.statewise.map((state, index) => {\r\n            if (state.state !== \"Total\") {\r\n                const activePercent = (state.active / state.confirmed) * 100;\r\n                const recoveredPercent = (state.recovered / state.confirmed) * 100;\r\n                const deathsPercent = (state.deaths / state.confirmed) * 100;\r\n                return (\r\n                    <Col key={index} xs=\"12\" sm=\"12\" md=\"6\" lg=\"4\" >\r\n                        <Card body outline color=\"primary\" className=\"shadow m-3 bg-white rounded\" onClick={() => { this.handleState(index) }} >\r\n                            <CardTitle className=\"text-primary font-weight-bold\">\r\n                                <h4>\r\n                                    {state.state} &nbsp;&nbsp;\r\n                                    <Badge pill color=\"primary\">\r\n                                        &#8593; {state.deltaconfirmed}\r\n                                    </Badge>\r\n                                </h4>\r\n                            </CardTitle>\r\n                            <div>\r\n                                <div className=\"text-center font-weight-bold\">confirmed : {state.confirmed}</div>\r\n                                <Progress style={{ height: \"22px\" }} value={state.confirmed !== \"0\" ? 100 : 0}>100%</Progress>\r\n                                <div className=\"text-center font-weight-bold\">Recovered : {state.recovered}</div>\r\n                                <Progress style={{ height: \"22px\" }} color=\"success\" value={recoveredPercent ? recoveredPercent : 0}>{recoveredPercent ? recoveredPercent.toFixed(1) : 0}%</Progress>\r\n                                <div className=\"text-center font-weight-bold\">Active : {state.active}</div>\r\n                                <Progress style={{ height: \"22px\" }} color=\"warning\" value={activePercent ? activePercent : 0}>{activePercent ? activePercent.toFixed(1) : 0}%</Progress>\r\n                                <div className=\"text-center font-weight-bold\">Deaths : {state.deaths}</div>\r\n                                <Progress style={{ height: \"22px\" }} color=\"danger\" value={deathsPercent ? deathsPercent : 0}>{deathsPercent ? deathsPercent.toFixed(1) : 0}%</Progress>\r\n                                <p className=\"text-muted\">*This card is clickable</p>\r\n                            </div>\r\n                        </Card>\r\n                        {this.state.stateindex === index ? <Table stateDistrict={this.state.stateData} /> : <div></div>}\r\n                    </Col>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <div key={state.state}></div>\r\n                )\r\n            }\r\n        })\r\n        return (\r\n            <Row>\r\n                {card}\r\n            </Row >\r\n        );\r\n    }\r\n}\r\nexport default States;","import React, { Component } from 'react';\r\nimport { Card, CardTitle, CardText, Badge, Container, Row, Col, Spinner } from 'reactstrap';\r\nimport States from './StateComponent'\r\n\r\nclass Country extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            total: null,\r\n            states: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await fetch('https://api.covid19india.org/data.json');\r\n        const data = await response.json();\r\n        this.setState({ total: data.statewise[0], states: data, loading: false })\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid={true} className=\"m-2 mb-5 justify-content-center\">\r\n                {this.state.loading ? <div className=\"d-flex justify-content-center\">\r\n                    <Spinner color=\"primary\" style={{ width: '5rem', height: '5rem' }} />\r\n                </div> :\r\n                    <div>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <h2>India&nbsp;&nbsp;&nbsp;&nbsp;</h2>\r\n                            <h2>{this.state.total.lastupdatedtime}</h2>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"primary\" className=\" shadow m-3 bg-white rounded\" >\r\n                                    <h4><CardTitle className=\"text-primary font-weight-bold\">Confirmed &nbsp;&nbsp;<Badge pill color=\"primary\">&#8593; {this.state.total.deltaconfirmed}</Badge></CardTitle></h4>\r\n                                    <h4> <CardText className=\"text-primary font-weight-bold\">{this.state.total.confirmed}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"warning\" className=\" shadow m-3 bg-white rounded\">\r\n                                    <h4><CardTitle className=\"text-warning font-weight-bold\">Active &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CardTitle></h4>\r\n                                    <h4> <CardText className=\"text-warning font-weight-bold\">{this.state.total.active}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"success\" className=\" shadow m-3 bg-white rounded\">\r\n                                    <h4><CardTitle className=\"text-success font-weight-bold\">Recovered &nbsp;&nbsp;&nbsp;&nbsp;<Badge pill color=\"success\">&#8593; {this.state.total.deltarecovered}</Badge></CardTitle></h4>\r\n                                    <h4> <CardText className=\"text-success font-weight-bold\">{this.state.total.recovered}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"danger\" className=\" shadow m-3 bg-white rounded\">\r\n                                    <h4> <CardTitle className=\"text-danger font-weight-bold\">Deaths &nbsp;&nbsp;<Badge pill color=\"danger\">&#8593; {this.state.total.deltadeaths}</Badge></CardTitle></h4>\r\n                                    <h4>  <CardText className=\"text-danger font-weight-bold\">{this.state.total.deaths}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <h2 className=\"d-flex justify-content-center\">States</h2>\r\n                        <States total={this.state.states} />\r\n                    </div>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n};\r\nexport default Country;","import React from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport './App.css';\nimport Country from './components/CountryComponent'\n\nfunction App() {\n  return (\n    <div className=\"container-fluid mt-3\">\n      <Navbar dark radius=\"10px\" color='primary' className=\"mb-2\">\n        <div>\n          <NavbarBrand href='/' className=\"font-weight-bold\">Covid-19-India</NavbarBrand>\n        </div>\n      </Navbar>\n      <Country />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}