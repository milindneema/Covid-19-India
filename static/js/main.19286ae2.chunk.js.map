{"version":3,"sources":["components/CountryComponent.js","components/StateComponent.js","App.js","serviceWorker.js","index.js"],"names":["Country","props","state","loading","total","fetch","response","json","data","this","setState","statewise","Container","fluid","className","Spinner","color","style","width","height","Row","lastupdatedtime","Col","xs","sm","md","lg","Card","body","outline","CardTitle","Badge","deltaconfirmed","CardText","confirmed","active","deltarecovered","recovered","deltadeaths","deaths","Component","States","map","activePercent","recoveredPercent","deathsPercent","Progress","Style","value","toFixed","App","Navbar","dark","radius","NavbarBrand","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19286ae2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, CardTitle, CardText, Badge, Container, Row, Col, Spinner } from 'reactstrap';\r\n\r\nclass Country extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            total: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await fetch('https://api.covid19india.org/data.json');\r\n        const data = await response.json();\r\n        this.setState({ total: data.statewise[0], loading: false })\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid={true} className=\"m-2 mb-5s\">\r\n                {this.state.loading ? <div className=\"d-flex justify-content-center\">\r\n                    <Spinner color=\"primary\" style={{ width: '5rem', height: '5rem' }} />\r\n                </div> :\r\n                    <div>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <h2>India&nbsp;&nbsp;&nbsp;&nbsp;</h2>\r\n                            <h2>{this.state.total.lastupdatedtime}</h2>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"primary\" className=\" shadow m-3 bg-white rounded\" >\r\n                                    <h4><CardTitle className=\"text-primary font-weight-bold\">Confirmed &nbsp;&nbsp;<Badge color=\"primary\">{this.state.total.deltaconfirmed}</Badge></CardTitle></h4>\r\n                                    <h4> <CardText className=\"text-primary font-weight-bold\">{this.state.total.confirmed}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"warning\" className=\" shadow m-3 bg-white rounded\">\r\n                                    <h4><CardTitle className=\"text-warning font-weight-bold\">Active &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CardTitle></h4>\r\n                                    <h4> <CardText className=\"text-warning font-weight-bold\">{this.state.total.active}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"success\" className=\" shadow m-3 bg-white rounded\">\r\n                                    <h4><CardTitle className=\"text-success font-weight-bold\">Recovered &nbsp;&nbsp;&nbsp;&nbsp;<Badge color=\"success\">{this.state.total.deltarecovered}</Badge></CardTitle></h4>\r\n                                    <h4> <CardText className=\"text-success font-weight-bold\">{this.state.total.recovered}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"3\">\r\n                                <Card body outline color=\"danger\" className=\" shadow m-3 bg-white rounded\">\r\n                                    <h4> <CardTitle className=\"text-danger font-weight-bold\">Deaths &nbsp;&nbsp;<Badge color=\"danger\">{this.state.total.deltadeaths}</Badge></CardTitle></h4>\r\n                                    <h4>  <CardText className=\"text-danger font-weight-bold\">{this.state.total.deaths}</CardText></h4>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n};\r\nexport default Country;","import React, { Component } from 'react';\r\nimport { Card, CardTitle, CardText, Badge, Progress, Container, Row, Col, Spinner } from 'reactstrap';\r\n\r\nclass States extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            total: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await fetch('https://api.covid19india.org/data.json');\r\n        const data = await response.json();\r\n        this.setState({ total: data, loading: false })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Container fluid={true} className=\"m-2 mb-5 d-flex justify-content-center\" >\r\n                <Row>\r\n                    {this.state.loading ? <div className=\"d-flex justify-content-center\">\r\n                        <Spinner color=\"primary\" style={{ width: '5rem', height: '5rem' }} />\r\n                    </div> : this.state.total.statewise.map((state) => {\r\n                        if (state.state !== \"Total\") {\r\n                            const activePercent = (state.active / state.confirmed) * 100;\r\n                            const recoveredPercent = (state.recovered / state.confirmed) * 100;\r\n                            const deathsPercent = (state.deaths / state.confirmed) * 100;\r\n                            return (\r\n                                <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"4\">\r\n                                    <Card body outline color=\"primary\" className=\"shadow m-3 bg-white rounded\" >\r\n                                        <CardTitle className=\"text-primary font-weight-bold\"><h4>{state.state} &nbsp;&nbsp;<Badge color=\"primary\">{state.deltaconfirmed}</Badge></h4></CardTitle>\r\n                                        <CardText>\r\n                                            <div>\r\n                                                <div className=\"text-center font-weight-bold\">confirmed : {state.confirmed}</div>\r\n                                                <Progress Style=\"height: 22px; color:text-dark;\" value={100}>100%</Progress>\r\n                                                <div className=\"text-center font-weight-bold\">Recovered : {state.recovered}</div>\r\n                                                <Progress Style=\"height: 22px;\" color=\"success\" value={recoveredPercent ? recoveredPercent : 0}>{recoveredPercent ? recoveredPercent.toFixed(1) : 0}%</Progress>\r\n                                                <div className=\"text-center font-weight-bold\">Active : {state.active}</div>\r\n                                                <Progress Style=\"height: 22px;\" color=\"warning\" value={activePercent ? activePercent : 0}>{activePercent ? activePercent.toFixed(1) : 0}%</Progress>\r\n                                                <div className=\"text-center font-weight-bold\">Deaths : {state.deaths}</div>\r\n                                                <Progress Style=\"height: 22px;\" color=\"danger\" value={deathsPercent ? deathsPercent : 0}>{deathsPercent ? deathsPercent.toFixed(1) : 0}%</Progress>\r\n                                            </div>\r\n                                        </CardText>\r\n                                    </Card>\r\n                                </Col>\r\n                            )\r\n                        }\r\n                        else {\r\n                            return (\r\n                                <div></div>\r\n                            )\r\n                        }\r\n                    })}\r\n                </Row>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n};\r\nexport default States;","import React from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport './App.css';\nimport Country from './components/CountryComponent'\nimport States from './components/StateComponent'\n\nfunction App() {\n  return (\n    <div className=\"container-fluid mt-3\">\n      <Navbar dark radius=\"10px\" color='primary' className=\"mb-2\">\n        <div>\n          <NavbarBrand href='/' className=\"font-weight-bold\">Covid-19-India</NavbarBrand>\n        </div>\n      </Navbar>\n      <Country />\n      <h2 className=\"d-flex justify-content-center\">States</h2>\n      <States />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}